cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
b <- c(1, 3, 77, 8, 44, 23, 0, 44)
d <- makeVector(b)
ls(d)
d$get
d$set
d$setmean
d$get
d$get()
d$set()
d$getmean()
d$setmean()
cachemean(d)
d <- makeVector(c(1, 3, 77, 8, 44, 23, 0, 44))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
d <- makeVector(c(1, 3, 77, 8, 44, 23, 0, 44))
d$get()
d$getmean()
cachemean(d)
d$getmean()
cachemean(d)
makeMatrix <- function(x = matrix()){
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get,
setinversion = setinversion,
getinversion = getinversion)
}
cacheinversion <- function(x, ...) {
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setmean(inv)
inv
}
matrix(c(1, 1, 1, 2, 2, 2, 3, 3, 3), 3, 3)
matrix(c(22, 1, 44, 7, 2, 5, 3, 8, 3), 3, 3)
o <- makeMatrix(matrix(c(22, 1, 44, 7, 2, 5, 3, 8, 3), 3, 3))
cacheinversion(o)
cacheinversion <- function(x, ...) {
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinversion(inv)
inv
}
cacheinversion(o)
## This set of functions allow for calculations on a input to be cached so they
## can be re-called at later without having to perform the calcualtion again.
## In this case, we will be using matrix inversion as an example.
## The first function produces a list of functions that will make the input
## cacheable. It is setting up an environment where the defined functions act as
## methods within the parent function's environment or class. By using the <<-
## operator within the two set functions, they can "see" and use the variables
## set in the parent environment rather than be closes off and thought of as
## completely different variables usable only within the function.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get,
setinversion = setinversion,
getinversion = getinversion)
}
## This function calls the functions defined in the first function, if the
## matrix inversion is already performed, it can access it from the
## makeCacheMatrix the getinversion() method, if it is is still a NULL, it will
## get the data with get() thenactually perform the calculation with the solve()
## function.
cacheSolve <- function(x, ...) {
inv <- x$getinversion()
if(!if.null(inv)) {
message("getting cached data")
retrun(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinversion(inv)
inv
}
## test the functions
test <- makeCacheMatrix(matrix(c(22, 1, 44, 7, 2, 5 , 3, 8, 3), 3, 3))
cacheinversion(test)
cacheSolve(test)
## This set of functions allow for calculations on a input to be cached so they
## can be re-called at later without having to perform the calcualtion again.
## In this case, we will be using matrix inversion as an example.
## The first function produces a list of functions that will make the input
## cacheable. It is setting up an environment where the defined functions act as
## methods within the parent function's environment or class. By using the <<-
## operator within the two set functions, they can "see" and use the variables
## set in the parent environment rather than be closes off and thought of as
## completely different variables usable only within the function.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinversion <- function(inversion) inv <<- inversion
getinversion <- function() inv
list(set = set, get = get,
setinversion = setinversion,
getinversion = getinversion)
}
## This function calls the functions defined in the first function, if the
## matrix inversion is already performed, it can access it from the
## makeCacheMatrix the getinversion() method, if it is is still a NULL, it will
## get the data with get() thenactually perform the calculation with the solve()
## function.
cacheSolve <- function(x, ...) {
inv <- x$getinversion()
if(!is.null(inv)) {
message("getting cached data")
retrun(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinversion(inv)
inv
}
## test the functions
test <- makeCacheMatrix(matrix(c(22, 1, 44, 7, 2, 5 , 3, 8, 3), 3, 3))
cacheSolve(test)
g <- c("heart attack", "heart failure", "pneumonia")
g[1]
g["heart attack"]
match("heart attack", g)
cols <- c(11, 17, 23)
newmat <- cbind(g, cols)
View(newmat)
match("heart attack", newmat)
match("heart failure", newmat)
getwd()
install.packages(c("digest", "httr", "manipulate", "raster", "RCurl", "rgdal", "sp", "swirl", "testthat"))
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
play()
ls()
nxt()
ls()
list.files()
>list.files
?list.files
list.files(recusrive = True)
list.files(recursive = TRUE)
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create(paste(old.dir, "testdir", sep = ""))
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
normalizePath("mytest.R")
normalizePath("mytest3.R")
file.path("mytest.R")
file.path("mytest3.R")
create.dir(create)
dir.create(c("testdir2", "testdir3"), recursive = TRUE)
info()
nxt()
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
file.remove("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
NOT 5 == 7
5 NOT == 7
NOT (5 == 7)
not(5 == 7)
!(5 ==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
set.seed
set.seed(1)
x <- rnomr(100)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
plot(x,y)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() <- t1
Sys.time() < t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plote(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
play()
str(mtcars)
summry(mtcars)
summary(mtcars)
?mtcars
nxt()
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
?rep
rep(0:1, each = 5)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
hist(y)
library("xlsx", lib.loc="~/R/win-library/3.1")
library("xlsx")
dat <- read.xlsx("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
library("xlsx")
dat <- read.xlsx("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
remove.packages(C("xslx", "xlsxjars", "rJava"))
remove.packages("rJava")
remove.packages("xlsxjars")
removing.packages("xlsx")
remove.packages("xlsx")
install.package("xlsx")
install.packages("xlsx")
library("xlsx")
dat <- read.xlsx("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
dat <- read.xlsx2("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
# This is based on a tutorial found here.
# https://github.com/hadley/httr/blob/master/demo/oauth2-github.r
# I just repleced all the arguments with my applicate credentials and the URL
# from the quiz
library(httr)
library(httpuv)
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
library(raster)
#This is the R library used to process raster files.
library(rgdal)
#You may need this library as well.
LANDIS_directory<-"C:/Users/Wes/Documents/Landis_book/Chapter_7_Outputs/Chapter_7/"
#file directory where inputs and outputs are found.  Edit this to represent your own file #location.
list.files(LANDIS_directory)
ecoregion_file<-paste(LANDIS_directory,"ecoregions.gis",sep="")
ecoregion_raster<-raster(ecoregion_file)
plot(ecoregion_raster)
freq(ecoregion_raster)
max_age_file<-paste(LANDIS_directory,"output/max-spp-age/AllSppMaxAge-20.img",sep="")
max_age_raster<-raster(max_age_file)
plot(max_age_raster)
ecoregion_DF<-as.data.frame(ecoregion_raster)
max_age_DF<-as.data.frame(max_age_raster)
head(ecoregion_Max_age_combine)
ecoregion_Max_age_combine<-cbind(ecoregion_DF,max_age_DF)
head(ecoregion_Max_age_combine)
unique_ecoregions<-unique(ecoregion_DF[,1])
for (unique_ecoregion in unique_ecoregions){
#for every unique ecoregion name (do some function)...
print (unique_ecoregion)
#print the ecoregion name
ecoregion_subset<- subset(ecoregion_Max_age_combine, ecoregion_Max_age_combine$ecoregions == unique_ecoregion)
#subset just the data from a single ecoregion.
ecoregion_mean_max_age<-mean(ecoregion_subset$AllSppMaxAge.20)
#Average max age for a unique ecoregion
print(ecoregion_mean_max_age)
#print the mean max age for a unique ecoregion
}
ecoregion_mean_max_age_summary<-tapply(max_age_DF[,1],list(ecoregion_DF[,1]), mean)
#summary of maxage by ecoregion.
print(ecoregion_mean_max_age_summary)
getwd()
setwd("./DataSci_coursera/ExploratoryDA/CourseProject01/ExData_Plotting1")
list.files
list.file()
list.files()
unzip(paste0("./DataSci_coursera/ExploratoryDA/CourseProject01/",
"exdata-data-household_power_consumption.zip")
"exdata-data-household_power_consumption.zip"))
unzip(paste0("./DataSci_coursera/ExploratoryDA/CourseProject01/",
"exdata-data-household_power_consumption.zip"))
getwd()
unzip(paste0("C:/Users/Wes/Documents//DataSci_coursera/ExploratoryDA/",
"CourseProject01/exdata-data-household_power_consumption.zip"))
setwd("./DataSci_coursera/ExploratoryDA/CourseProject01")
